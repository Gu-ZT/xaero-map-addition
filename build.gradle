plugins {
    id('fabric-loom').version('0.10-SNAPSHOT')
    id('maven-publish')
    id('org.ajoberstar.grgit').version('4.1.0')
}

if (project.java_version == "17") {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
} else if (project.java_version == "16") {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
} else if (project.java_version == "8") {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
} else {
    throw new GradleException("wrong java_version")
}

String real_version = "${project.mod_version}"


String getGitMetadata() {
    String ret = grgit.head().abbreviatedId
    if (!grgit.status().clean) {
        ret = new Date().format('yyyyMMdd.HHmmss') + ".dirty." + ret
    }
    return ret
}

if (project.pre_release != "") {
    real_version += "-${project.pre_release}+" + getGitMetadata()
}

version = "${project.minecraft_version}-${real_version}" as Object

group = project.maven_group

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
}


dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation("curse.maven:xaeros-world-map-317780:${project.xaero_world_map_version}")
    modImplementation("curse.maven:xaeros-minimap-263420:${project.xaero_minimap_version}")
    modImplementation("curse.maven:ommc-454900:${project.ommc_version}")
    modImplementation("curse.maven:malilib-303119:${project.malilib_version}")
}

processResources {
    inputs.property("version", real_version)
    filesMatching("fabric.mod.json") {
        expand(["version": real_version])
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (project.java_version == "17") {
        it.options.release.set(17)
    } else if (project.java_version == "16") {
        it.options.release.set(16)
    } else if (project.java_version == "8") {
        it.options.release.set(8)
    } else {
        throw new GradleException("wrong java_version")
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    // withSourcesJar()
}

jar {
    from("LICENSE") {
        rename({ return "${it}_${project.archives_base_name}" })
    }
}

// configure the maven publication
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            // add all the jars that should be included when publishing to maven
//            artifact(remapJar) {
//                builtBy remapJar
//            }
//            artifact(sourcesJar) {
//                builtBy remapSourcesJar
//            }
//        }
//    }
//
//    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//    repositories {
//        // Add repositories to publish to here.
//        // Notice: This block does NOT have the same function as the block in the top level.
//        // The repositories here will be used for publishing your artifact, not for
//        // retrieving dependencies.
//    }
//}
